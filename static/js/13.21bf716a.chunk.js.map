{"version":3,"sources":["hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","hooks/useGetAccumulatingNest.ts","hooks/useGetAccumulatingNestAddr.ts","hooks/useGetNestBusd.ts","views/Home/components/NestCard.tsx","views/Home/Home.tsx"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","tokenAddress","setBalance","ethereum","getTokenBalance","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","harvestButtonStyle","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","getCakeAddress","mousePrice","usePriceCakeBusd","toNumber","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","href","target","rel","className","size","mb","src","alt","width","height","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","getContract","cakeABI","methods","call","supply","fetchTotalSupply","useTotalSupply","burnedBalance","balanceOf","bal","useBurnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","mousePerBlock","display","alignItems","maxWidth","marginRight","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","chrome","useGetAccumulatingNest","nestNum","accumulatingNest","setAccumulatingNest","setAccumulatingNestAddr","setResult","nestMakerContract","useNestMaker","getCurrentNest","theNest","theAddress","fetchCurrentNest","useGetAccumulatingNestAddr","accumulatingNestAddr","useGetNestBusd","busd","setBusd","nestContract","useNest","getNestBusd","busdVal","logoStyle","NestCard","currentNest","currentNestAddr","currentNestBUSD","Hero","mediaQueries","lg","Cards","BaseLayout","sm","marginTop","spaceTop","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/13.21bf716a.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingMouse',\r\n        params: [farm.pid, account],\r\n      }))\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize}>\r\n      {prefix}{countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({earningsSum}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({ cakeBalance }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingMouse',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\nimport './MouseBtn.css'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/mouse/2a.png');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const mousePrice = usePriceCakeBusd().toNumber()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  const blackCol = {\r\n    color: 'black',\r\n  }\r\n\r\n  let harvestButtonStyle;\r\n\r\n  if( earningsSum !== 0 ) {\r\n    harvestButtonStyle = {\r\n      color: 'black',\r\n    }\r\n  }\r\n\r\n  const centerAlign = {\r\n    display: 'flex',\r\n    flexDirection: 'column' as any as 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  }\r\n\r\n  const mouseBuyURL = 'https://exchange.mouse.farm/#/swap?outputCurrency=0x71F2f0ce6e858de06e94aad9eF0cD4FFFa298034'\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n    <a href={mouseBuyURL} target=\"_blank\" rel=\"noreferrer\" className=\"buy-mouse-btn\" >Buy MOUSE</a>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/mouse/2.png\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{TranslateString(544, 'MOUSE to Harvest')}</Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum}/>\r\n          <Label>~${(mousePrice * earningsSum).toFixed(2)}</Label>\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'MOUSE in Wallet')}</Label>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <Label>~${(mousePrice * cakeBalance).toFixed(2)}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              style={harvestButtonStyle}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting MOUSE')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const farms = useFarms();\r\n  const mousePrice = usePriceCakeBusd();\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\r\n  const cakeSupply = getBalanceNumber(circSupply);\r\n  const marketCap = mousePrice.times(circSupply);\r\n\r\n  let mousePerBlock = 0;\r\n  if(farms && farms[0] && farms[0].mousePerBlock){\r\n    mousePerBlock = new BigNumber(farms[0].mousePerBlock).div(new BigNumber(10).pow(18)).toNumber();\r\n  }\r\n\r\n  const logoStyle = {\r\n    maxWidth: '5%',\r\n    marginRight: '12px'\r\n  }\r\n\r\n  const txtCenter = {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  }\r\n\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading style={txtCenter} size=\"xl\" mb=\"24px\">\r\n          <img src=\"https://mouse.farm/images/mouse/mouse.png\" style={logoStyle} alt=\"snek\" />\r\n          {TranslateString(534, 'Mouse Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">🖇️ {TranslateString(536, 'Total MOUSE Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">📈 {TranslateString(999, 'Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">🔥 {TranslateString(538, 'Total MOUSE Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">🐣 {TranslateString(540, 'New MOUSE/block')}</Text>\r\n          <Text bold fontSize=\"14px\">{mousePerBlock}</Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue();\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(999, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        <>\r\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\r\n          {/* <Heading size=\"xl\"> */}\r\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n          {/* </Heading> */}\r\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\r\n        </>\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'FarmHubBSC'\r\n          }}\r\n          options={{\r\n            height: '300',\r\n            chrome: \"noheader, nofooter\",\r\n            width: \"1000\",\r\n            theme: 'dark'\r\n          }}\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getNestMakerAddress } from 'utils/addressHelpers'\r\nimport nestMakerABI from 'config/abi/nestMakerABI.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { getCurrentNest } from 'utils/callHelpers'\r\nimport useRefresh from './useRefresh'\r\nimport { useNestMaker } from './useContract'\r\n\r\nconst useGetAccumulatingNest = () => {\r\n  const [nestNum, setNestNum] = useState(0)\r\n  const [accumulatingNest, setAccumulatingNest] = useState(0)\r\n  const [accumulatingNestAddr, setAccumulatingNestAddr] = useState('')\r\n  const [result, setResult] = useState({})\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n  const nestMakerContract = useNestMaker()\r\n\r\n  useEffect(() => {\r\n    const fetchCurrentNest = async () => {\r\n    \tconst theNest = await getCurrentNest(nestMakerContract, account);\r\n    \tsetAccumulatingNest( theNest.nestNum )\r\n      setAccumulatingNestAddr( theNest.theAddress )\r\n      setResult( theNest )\r\n    }\r\n\r\n    \r\n    fetchCurrentNest()\r\n    \r\n  }, [nestNum, account, nestMakerContract])\r\n\r\n  return accumulatingNest\r\n}\r\n\r\nexport default useGetAccumulatingNest\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getNestMakerAddress } from 'utils/addressHelpers'\r\nimport nestMakerABI from 'config/abi/nestMakerABI.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { getCurrentNest } from 'utils/callHelpers'\r\nimport useRefresh from './useRefresh'\r\nimport { useNestMaker } from './useContract'\r\n\r\nconst useGetAccumulatingNestAddr = () => {\r\n  const [nestNum, setNestNum] = useState(0)\r\n  const [accumulatingNest, setAccumulatingNest] = useState(0)\r\n  const [accumulatingNestAddr, setAccumulatingNestAddr] = useState('')\r\n  const [result, setResult] = useState({})\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n  const nestMakerContract = useNestMaker()\r\n\r\n  useEffect(() => {\r\n    const fetchCurrentNest = async () => {\r\n    \tconst theNest = await getCurrentNest(nestMakerContract, account);\r\n    \tsetAccumulatingNest( theNest.nestNum )\r\n      setAccumulatingNestAddr( theNest.theAddress )\r\n      setResult( theNest )\r\n    }\r\n\r\n    \r\n    fetchCurrentNest()\r\n    \r\n  }, [nestNum, account, nestMakerContract])\r\n\r\n  return accumulatingNestAddr\r\n}\r\n\r\nexport default useGetAccumulatingNestAddr\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getNestMakerAddress } from 'utils/addressHelpers'\r\nimport nestMakerABI from 'config/abi/nestMakerABI.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { getCurrentNest, getNestBusd } from 'utils/callHelpers'\r\nimport useRefresh from './useRefresh'\r\nimport { useNestMaker, useNest } from './useContract'\r\n\r\nconst useGetNestBusd = ( address ) => {\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n  const [busd, setBusd] = useState(0);\r\n  const nestMakerContract = useNestMaker()\r\n  const nestContract = useNest( address )\r\n\r\n  useEffect(() => {\r\n    const fetchCurrentNest = async () => {\r\n    \tconst busdVal = await getNestBusd(nestContract, account);\r\n      setBusd(busdVal)\r\n    }\r\n\r\n    \r\n    fetchCurrentNest()\r\n    \r\n  }, [account, fastRefresh, nestContract])\r\n\r\n  return busd\r\n}\r\n\r\nexport default useGetNestBusd\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport useGetAccumulatingNest from '../../../hooks/useGetAccumulatingNest'\r\nimport useGetAccumulatingNestAddr from '../../../hooks/useGetAccumulatingNestAddr'\r\nimport useGetNestBusd from '../../../hooks/useGetNestBusd'\r\nimport CardValue from './CardValue'\r\nimport './FarmhubInfo.css'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  box-shadow: 0 0 21px 4px rgb(0 0 0 / 45%);\r\n`\r\n\r\nconst logoStyle = {\r\n  maxWidth: '0%',\r\n}\r\n\r\nconst headingStyle = {\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  alignItems: 'center',\r\n}\r\n\r\nconst urlStyle = {\r\n  textDecoration: 'underline',\r\n}\r\n\r\nconst tinyStyle = {\r\n  maxWidth: '18px',\r\n  maxHeight: '18px',\r\n}\r\n\r\nconst infoText = {\r\n  display: 'flex',\r\n}\r\n\r\nconst NestCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue()\r\n  let currentNest = useGetAccumulatingNest()\r\n  const currentNestAddr = useGetAccumulatingNestAddr()\r\n  // Subtract the first unused nests\r\n  currentNest -= 5\r\n  if (currentNest <= 0) {\r\n    currentNest = 0\r\n  }\r\n  const currentNestBUSD = useGetNestBusd(currentNestAddr) / 1000000000000000000\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <div className=\"nest-card\">\r\n          <div className=\"nest-header\">\r\n            <img src=\"https://farmhub.community/images/nest-eagle-busd.png\" style={logoStyle} alt=\"snek\" />\r\n            <span className=\"nest-number\"><CardValue value={currentNest} prefix=\"Nest \" decimals={0} /></span>\r\n          </div>\r\n          <CardValue value={currentNestBUSD} prefix=\"$\" decimals={2} />\r\n          <div className=\"nest-cta\">\r\n            <a href=\"https://eaglenest.finance\" className=\"visit-nest-btn\" target=\"_blank\" rel=\"noreferrer\">Visit the nest!</a>\r\n          </div>\r\n        </div>\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default NestCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport LotteryCard from './components/LotteryCard'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\nimport NestCard from './components/NestCard'\r\n\r\nconst Hero = styled.div`\r\n\talign-items: center;\r\n\tbackground-image: url('/images/mouse/3.png');\r\n\tbackground-repeat: no-repeat;\r\n\tbackground-position: top center;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\tflex-direction: column;\r\n\tmargin: auto;\r\n\tmargin-bottom: 32px;\r\n\tpadding-top: 116px;\r\n\ttext-align: center;\r\n\r\n\t${({ theme }) => theme.mediaQueries.lg} {\r\n\t\tbackground-image: url('/images/mouse/3.png'), url('/images/mouse/3b.png');\r\n\t\tbackground-position: left center, right center;\r\n\t\theight: 165px;\r\n\t\tpadding-top: 0;\r\n\t}\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n\talign-items: stretch;\r\n\tjustify-content: stretch;\r\n\tmargin-bottom: 48px;\r\n\r\n\t& > div {\r\n\t\tgrid-column: span 12;\r\n\t\twidth: 100%;\r\n\t\tbox-shadow: 0 0 21px 4px rgb(0 0 0 / 45%);\r\n\t}\r\n\r\n\t${({ theme }) => theme.mediaQueries.sm} {\r\n\t\t& > div {\r\n\t\t\tgrid-column: span 12;\r\n\t\t}\r\n\t}\r\n\r\n\t${({ theme }) => theme.mediaQueries.lg} {\r\n\t\t& > div {\r\n\t\t\tgrid-column: span 12;\r\n\t\t}\r\n\t}\r\n`\r\nconst logoStyle = {\r\n\tmaxWidth: '50%',\r\n\tmarginTop: '2.5rem',\r\n}\r\n\r\nconst spaceTop = {\r\n\tmarginTop: '2vh',\r\n}\r\n\r\nconst Home: React.FC = () => {\r\n\tconst TranslateString = useI18n()\r\n\r\n\treturn (\r\n\t\t<Page>\r\n\t\t\t<NestCard />\r\n\t\t\t<Hero style={spaceTop}>\r\n\t\t\t\t<Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n\t\t\t\t\t<img style={logoStyle} src=\"https://mouse.farm/images/backgrounds/mouse-logo.png\" alt=\"Mouse farm\" />\r\n\t\t\t\t</Heading>\r\n\t\t\t</Hero>\r\n\t\t\t<div>\r\n\t\t\t\t<Cards>\r\n\t\t\t\t\t<FarmStakingCard />\r\n\t\t\t\t\t<CakeStats />\r\n\t\t\t\t\t<TotalValueLockedCard />\r\n\t\t\t\t\t<TwitterCard />\r\n\t\t\t\t</Cards>\r\n\t\t\t</div>\r\n\t\t</Page>\r\n\t)\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}