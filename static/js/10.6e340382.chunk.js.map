{"version":3,"sources":["utils/getLiquidityUrlPathParts.ts","hooks/useStake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","config/index.ts","components/Tags.tsx","hooks/useApprove.ts","hooks/useUnstake.ts","utils/compoundApyHelpers.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Memes/components/FarmCard/DetailsSection.tsx","views/Memes/components/FarmCard/CardHeading.tsx","views/Memes/components/DepositModal.tsx","views/Memes/components/WithdrawModal.tsx","views/Memes/components/FarmCard/StakeAction.tsx","views/Memes/components/FarmCard/HarvestAction.tsx","views/Memes/components/FarmCard/CardActionsContainer.tsx","views/Memes/components/FarmCard/ApyCalculatorModal.tsx","views/Memes/components/FarmCard/ApyButton.tsx","views/Memes/components/FarmCard/FarmCard.tsx","views/Memes/Memes.tsx"],"names":["getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","useStake","pid","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onStake","useCallback","amount","a","stake","txHash","fetchFarmUserDataAsync","console","info","StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","buttonCol","color","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","TranslateString","useI18n","toLocaleString","style","onClick","BigNumber","times","toString","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","NoFeeTag","variant","outline","startIcon","useApprove","lpContract","onApprove","approve","tx","useUnstake","onUnstake","unstake","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Wrapper","ExpandableSectionButton","expanded","aria-label","role","bold","defaultProps","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","liquidityUrlPathParts","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","getContract","handleApprove","error","textTransform","fontSize","pr","mt","fullWidth","UnlockButton","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","display","CardActionsContainer","Memes","require","farmsProps","useRouteMatch","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","memestyle","userData","farmsToDisplay","cakeRewardPerYear","mousePerBlock","poolWeight","pow","comparedTo","maxWidth","borderRadius","boxShadow","marginTop","Page","className"],"mappings":"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","file":"static/js/10.6e340382.chunk.js","sourcesContent":["// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  startAdornment?: React.ReactNode\r\n  value: string\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  )\r\n}\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.input};\r\n  border-radius: ${(props) => props.theme.radii.default};\r\n  display: flex;\r\n  height: 72px;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\nimport Input, { InputProps } from '../Input'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst buttonCol = {\r\n  color: 'black',\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"sm\" style={buttonCol} onClick={onSelectMax}>\r\n                {TranslateString(452, 'Max')}\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n      {\r\n        depositFeeBP > 0 ?\r\n          <StyledMaxText>\r\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\r\n          </StyledMaxText>\r\n          :\r\n          null\r\n      }\r\n\r\n    </StyledTokenInput>\r\n  )\r\n}\r\n\r\nconst StyledTokenInput = styled.div``\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TokenInput\r\n","import BigNumber from 'bignumber.js/bignumber'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nexport const CAKE_PER_BLOCK = new BigNumber(1)\r\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\r\nexport const BSC_BLOCK_TIME = 3\r\n\r\nexport const CAKE_POOL_PID = 1\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst NoFeeTag = () => (\r\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\r\n    No Fees\r\n  </Tag>\r\n)\r\n\r\nconst RiskTag = ({ risk }) => (\r\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\r\n    Risk {risk}\r\n  </Tag>\r\n)\r\n\r\nconst CoreTag = () => (\r\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = () => (\r\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\r\n    Community\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = () => (\r\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\r\n\r\nexport const useSousUnstake = (sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport interface ExpandableSectionProps {\r\n  isTokenOnly?: boolean\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  isTokenOnly,\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={\r\n          isTokenOnly ?\r\n            `https://exchange.goosedefi.com/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n            :\r\n          `https://exchange.mouse.farm/#/add/${liquidityUrlPathParts}`\r\n        }>\r\n          {lpLabel}\r\n        </StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  risk,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          {/* <RiskTag risk={risk} /> */}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport styled from 'styled-components'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { onStake } = useStake(pid)\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <BalanceAndCompound>\r\n        {pid === 3 || pid === 12 || pid === 13 ?\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            size='sm'\r\n            variant='secondary'\r\n            marginBottom='15px'\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(rawEarningsBalance.toString())\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n          : null}\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getContract(ethereum as provider, tokenAddress);\r\n    }\r\n    return getContract(ethereum as provider, lpAddress);\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\r\n    ) : (\r\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(999, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          MOUSE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\nimport { Address } from 'config/constants/types'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'MOUSE per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={`https://exchange.toad.farm/#/add/${liquidityUrlPathParts}`}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport { Address } from 'config/constants/types'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      lpLabel={lpLabel}\r\n      quoteTokenAdresses={quoteTokenAdresses}\r\n      quoteTokenSymbol={quoteTokenSymbol}\r\n      tokenAddresses={tokenAddresses}\r\n      cakePrice={cakePrice}\r\n      apy={apy}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(45deg,\r\n  rgba(255, 0, 0, 1) 0%,\r\n  rgba(255, 154, 0, 1) 10%,\r\n  rgba(208, 222, 33, 1) 20%,\r\n  rgba(79, 220, 74, 1) 30%,\r\n  rgba(63, 218, 216, 1) 40%,\r\n  rgba(47, 201, 226, 1) 50%,\r\n  rgba(28, 127, 238, 1) 60%,\r\n  rgba(95, 21, 242, 1) 70%,\r\n  rgba(186, 12, 248, 1) 80%,\r\n  rgba(251, 7, 217, 1) 90%,\r\n  rgba(255, 0, 0, 1) 100%);\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'MOUSE'\r\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  })\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'MOUSE' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent='space-between' alignItems='center'>\r\n          <Text>{TranslateString(352, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          bscScanAddress={\r\n            farm.isTokenOnly ?\r\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              :\r\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport listReactFiles from 'list-react-files'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nconst fs = require('fs');\r\n\r\n\r\n/* eslint @typescript-eslint/no-var-requires: \"off\" */\r\n\r\n\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Memes: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const {tokenMode} = farmsProps;\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.mousePerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear);\r\n\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice);\r\n        }\r\n\r\n        if(totalValue.comparedTo(0) > 0){\r\n          apy = apy.div(totalValue);\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  \tconst warning = {\r\n  \t\t    backgroundColor: \"rgba(100,0,0,0.55)\",\r\n\t\t    borderRadius: \"6px\",\r\n\t\t    border: \"1px solid rgba(200,0,0,0.55)\",\r\n\t\t    marginBottom: \"10px\",\r\n\t\t    color: \"white\",\r\n\t\t    padding: \"5px\",\r\n\t\t    display: 'flex',\r\n  \t}\r\n\r\n  \tconst margintop = {\r\n  \t\tmarginTop: '18px'\r\n  \t}\r\n\r\n    const memestyle = {\r\n      maxWidth: '100%',\r\n      borderRadius: '6px',\r\n      boxShadow: '0 0 11px 1px rgba(0,0,0,0.25)',\r\n      marginTop: '15px'\r\n    }\r\n\r\n    const memescontainer = {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      maxWidth: '100%',\r\n      justifyContent: 'center',\r\n      alignItems: 'center'\r\n    }\r\n\r\n    const downloadlink = {\r\n      color: 'white', \r\n      fontSize: '2rem'\r\n    }\r\n\r\n\r\n\r\n  return (\r\n    <Page>\r\n\r\n     <div className=\"memes-container\" style={memescontainer as React.CSSProperties} >\r\n     <a href=\"memes.rar\" style={downloadlink}>Click here to download the meme archive</a>\r\n      <img style={memestyle} src=\"images/memes/abdullah.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/aditya.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/ai.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/aldo.png\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/anargya.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/anjay.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/apimasapit.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/aq.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/archis.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/azam.png\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/bart.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/chunkzrevenge.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/clow.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/criztyan.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/crypto emoto.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/daolicious2.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/daolicious.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/darmawan.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/drew eth.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/empress.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/federico.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/guillermo.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/guillermo2.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/guillermo3.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/hama.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/hanji.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/happydrop.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/hendry.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/hosann.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/itsanillusion.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/john brown.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/kang.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/linnwave.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/majorpenguin.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/meong.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/meowoem.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/mm.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/myway.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/nbah.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/nikolay.png\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/nnusategl.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/no cap.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/npa.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/olaf.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/ongelma.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/phantomsaw.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/phantomsaw2.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/phantomsaw3.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/phantomsaw4.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/phantomsaw5.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/pilip fhe.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/ressa.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/ressa2.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/rizky.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/rob hwang.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/robinsar.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/sebastian.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/sigurd bjorge.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/suprihatin.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/type thing.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/uestace.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/yakinlah.jpg\" alt=\"meme\" />\r\n      <img style={memestyle} src=\"images/memes/yang.jpg\" alt=\"meme\" />\r\n      \r\n     </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Memes\r\n"],"sourceRoot":""}