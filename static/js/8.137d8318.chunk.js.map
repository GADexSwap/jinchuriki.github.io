{"version":3,"sources":["utils/getLiquidityUrlPathParts.ts","hooks/useStake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","config/index.ts","components/Tags.tsx","hooks/useApprove.ts","hooks/useUnstake.ts","utils/compoundApyHelpers.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","components/layout/Flex.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","useStake","pid","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onStake","useCallback","amount","a","stake","txHash","fetchFarmUserDataAsync","console","info","StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","buttonCol","color","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","TranslateString","useI18n","toLocaleString","style","onClick","BigNumber","times","toString","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","NoFeeTag","variant","outline","startIcon","useApprove","lpContract","onApprove","approve","tx","useUnstake","onUnstake","unstake","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Wrapper","ExpandableSectionButton","expanded","aria-label","role","bold","defaultProps","FlexLayout","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","liquidityUrlPathParts","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","stakedDollarValue","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","dollarValue","Number","undefined","maximumFractionDigits","className","opacity","fontSize","mr","BalanceAndCompound","HarvestAction","buttonStyle","earnings","onReward","useHarvest","rawEarningsBalance","log","marginBottom","Action","CardActions","bnbPrice","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","stakedAmount","pow","tokensInChef","isZero","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","BUSD","getContract","handleApprove","error","blackCol","textTransform","pr","mt","fullWidth","UnlockButton","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","ethPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","ETH","farmAPY","minimumFractionDigits","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","usePriceEthBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","mousePerBlock","poolWeight","comparedTo","Page","textAlign","marginTop","exact","responsive"],"mappings":"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","file":"static/js/8.137d8318.chunk.js","sourcesContent":["// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  startAdornment?: React.ReactNode\r\n  value: string\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  )\r\n}\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.input};\r\n  border-radius: ${(props) => props.theme.radii.default};\r\n  display: flex;\r\n  height: 72px;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\nimport Input, { InputProps } from '../Input'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst buttonCol = {\r\n  color: 'black',\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"sm\" style={buttonCol} onClick={onSelectMax}>\r\n                {TranslateString(452, 'Max')}\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n      {\r\n        depositFeeBP > 0 ?\r\n          <StyledMaxText>\r\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\r\n          </StyledMaxText>\r\n          :\r\n          null\r\n      }\r\n\r\n    </StyledTokenInput>\r\n  )\r\n}\r\n\r\nconst StyledTokenInput = styled.div``\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TokenInput\r\n","import BigNumber from 'bignumber.js/bignumber'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nexport const CAKE_PER_BLOCK = new BigNumber(1)\r\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\r\nexport const BSC_BLOCK_TIME = 3\r\n\r\nexport const CAKE_POOL_PID = 1\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst NoFeeTag = () => (\r\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\r\n    No Fees\r\n  </Tag>\r\n)\r\n\r\nconst RiskTag = ({ risk }) => (\r\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\r\n    Risk {risk}\r\n  </Tag>\r\n)\r\n\r\nconst CoreTag = () => (\r\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = () => (\r\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\r\n    Community\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = () => (\r\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\r\n\r\nexport const useSousUnstake = (sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport interface ExpandableSectionProps {\r\n  isTokenOnly?: boolean\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  isTokenOnly,\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={\r\n          isTokenOnly ?\r\n            `https://exchange.mouse.farm/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n            :\r\n          `https://exchange.mouse.farm/#/add/${liquidityUrlPathParts}`\r\n        }>\r\n          {lpLabel}\r\n        </StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n  color: black;\r\n`\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  risk,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          {/* <RiskTag risk={risk} /> */}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst buttonCol = {\r\n  color: 'black',\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          style={buttonCol}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  stakedDollarValue?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst buttonCol = {\r\n  color: 'black'\r\n}\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, stakedDollarValue, tokenBalance, tokenName, pid, depositFeeBP}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const dollarValue = stakedDollarValue\r\n    ? `$${Number(stakedDollarValue).toLocaleString(undefined, { maximumFractionDigits: 2 })}`\r\n    : '-'\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit} style={buttonCol} >{TranslateString(999, 'Stake')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  const dollarStyle = {\r\n    opacity: '0.5',\r\n    fontSize: '0.9rem'\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance} <span className=\"\" style={dollarStyle}>({dollarValue})</span></Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport styled from 'styled-components'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\n\r\n\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { onStake } = useStake(pid)\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  console.log(rawEarningsBalance)\r\n  \r\n  let buttonStyle;  \r\n  \r\n  if( rawEarningsBalance !== 0 ) {\r\n    buttonStyle = {\r\n      color: 'black',\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <BalanceAndCompound>\r\n        {pid === 0 ?\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            size='sm'\r\n            variant='secondary'\r\n            marginBottom='15px'\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(rawEarningsBalance.toString())\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n          : null}\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          style={buttonStyle}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n  tokensInChef?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  bnbPrice?: BigNumber \r\n  cakePrice?: BigNumber\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ cakePrice, bnbPrice, farm, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  // Calculate value of LP token \r\n  const stakedDollarValue: BigNumber = useMemo(() => {\r\n    const stakedAmount = stakedBalance.div(new BigNumber(10).pow(18)).div(farm.tokensInChef)\r\n\r\n    if( stakedBalance.isZero() ) {\r\n      return new BigNumber(0);\r\n    }\r\n\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken).times(stakedAmount)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken).times(stakedAmount)\r\n    }\r\n\r\n    if( farm.quoteTokenSymbol === QuoteToken.BUSD) {\r\n      return new BigNumber(1).times(farm.lpTotalInQuoteToken).times(stakedAmount)\r\n    }\r\n\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol, stakedBalance, farm.tokensInChef])\r\n\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getContract(ethereum as provider, tokenAddress);\r\n    }\r\n    return getContract(ethereum as provider, lpAddress);\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const blackCol = {\r\n    color: 'black',\r\n  }\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction stakedBalance={stakedBalance} stakedDollarValue={stakedDollarValue} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\r\n    ) : (\r\n      <Button mt=\"8px\" style={blackCol} fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n        Enable\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          MOUSE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\nimport { Address } from 'config/constants/types'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'MOUSE per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={`https://exchange.mouse.farm/#/add/${liquidityUrlPathParts}`}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport { Address } from 'config/constants/types'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      lpLabel={lpLabel}\r\n      quoteTokenAdresses={quoteTokenAdresses}\r\n      quoteTokenSymbol={quoteTokenSymbol}\r\n      tokenAddresses={tokenAddresses}\r\n      cakePrice={cakePrice}\r\n      apy={apy}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(45deg,\r\n  rgba(255, 0, 0, 1) 0%,\r\n  rgba(255, 154, 0, 1) 10%,\r\n  rgba(208, 222, 33, 1) 20%,\r\n  rgba(79, 220, 74, 1) 30%,\r\n  rgba(63, 218, 216, 1) 40%,\r\n  rgba(47, 201, 226, 1) 50%,\r\n  rgba(28, 127, 238, 1) 60%,\r\n  rgba(95, 21, 242, 1) 70%,\r\n  rgba(186, 12, 248, 1) 80%,\r\n  rgba(251, 7, 217, 1) 90%,\r\n  rgba(255, 0, 0, 1) 100%);\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n  box-shadow: 0 0 21px 4px rgb(0 0 0 / 45%);\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n      return ethPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, ethPrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'MOUSE'\r\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  })\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'MOUSE' && <StyledCardAccent />}\r\n      {farm.tokenSymbol === 'TOAD' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent='space-between' alignItems='center'>\r\n          <Text>{TranslateString(352, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n      </Flex>\r\n      <CardActionsContainer bnbPrice={bnbPrice} cakePrice={cakePrice} farm={farm} ethereum={ethereum} account={account} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          bscScanAddress={\r\n            farm.isTokenOnly ?\r\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              :\r\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ToggleWrapper>\r\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\r\n        <Text> {TranslateString(699, 'Staked only')}</Text>\r\n      </ToggleWrapper>\r\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(698, 'Active')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(700, 'Inactive')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 32px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceEthBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const ethPrice = usePriceEthBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const {tokenMode} = farmsProps;\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.mousePerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear);\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice);\r\n        } else if( farm.quoteTokenSymbol === QuoteToken.ETH ) {\r\n          totalValue = totalValue.times(ethPrice);\r\n        }\r\n\r\n        if(totalValue.comparedTo(0) > 0){\r\n          apy = apy.div(totalValue);\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          ethPrice={ethPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, ethPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  \tconst warning = {\r\n\t\t    borderRadius: \"6px\",\r\n\t\t    marginBottom: \"10px\",\r\n\t\t    color: \"white\",\r\n\t\t    padding: \"5px\",\r\n\t\t    display: 'flex',\r\n  \t}\r\n\r\n  \tconst margintop = {\r\n  \t\tmarginTop: '18px'\r\n  \t}\r\n\r\n  return (\r\n    <Page>\r\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {\r\n          tokenMode ?\r\n            TranslateString(10002, 'Stake tokens to earn MOUSE')\r\n            :\r\n          TranslateString(320, 'Stake LP tokens to earn MOUSE')\r\n        }\r\n      </Heading>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        Deposit Fee will be used to increase the value of Eagle&apos;s Nests!\r\n      </Heading>\r\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\r\n      <div>\r\n        <Divider style={margintop}/>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n      <Image src=\"/images/mouse/8.png\" alt=\"illustration\" width={1352} height={587} responsive />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}